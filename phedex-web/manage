#! /bin/bash

case $(id -un) in cmsweb ) echo "ERROR: please use another account" 1>&2; exit 1;; esac

#######################################################
# Phedex-WEB management script
# Author: Ignas Butenas, contact if needed by email: ignas.butenas@cern.ch
#######################################################
# Setting the basic and common variables.
# Make sure that these are up to date.
# If need a new variable, it must be defined here.
# Use export if you really need this!
#######################################################

ME=$(basename $(dirname $0))
TOP=$(cd $(dirname $0)/../../.. && pwd)
ROOT=$(cd $(dirname $0)/../.. && pwd)
CFGDIR=$(dirname $0)
LOGDIR=$TOP/logs/$ME
STATEDIR=$TOP/state/$ME
SERVICE_TITLE="Phedex-WEB"
TWIKI_PAGE="https://twiki.cern.ch/twiki/bin/view/CMS/PhedexOperationsWebSite#WebStart"
PHEDEX_PATTERN="/httpd -f .*/apache2/conf/apache2.conf"
GRAPHS_PATTERN="phedex-graphs"
PHEDEX_GRAPHS=$ROOT/apps/PHEDEX-web/bin/cmsweb_phedex_graphs
for app in PHEDEX-{datasvc,web,webapp}; do
  [ -d $ROOT/apps/$app/etc/profile.d ] &&
    . $ROOT/apps/$app/etc/profile.d/init.sh
done
export MPLCONFIGDIR=$STATEDIR

#######################################################
# Function for the main actions.
# If using the variable here, need to define it in the
# top part of the script, to keep them in one place.
#######################################################
# Function to start the service conditionally on crond restart
function sysboot {
  if [ $(pgrep -u $(id -u) -f "$PHEDEX_PATTERN" | wc -l) = 0 ] ||
     [ $(pgrep -u $(id -u) -f "$GRAPHS_PATTERN" | wc -l) = 0 ]; then
    start
  fi
}

# Function which is used to start the service
function start {
  cd $STATEDIR
  echo "Starting the $SERVICE_TITLE"
  apache2/etc/init.d/httpd start </dev/null 2>&1
  [ -f $ROOT/enabled/phedex-web ] && $PHEDEX_GRAPHS start </dev/null 2>&1
}

# Stopping the graphs service
function kill_graphs {
  [ -f $ROOT/enabled/phedex-web ] || return
  $PHEDEX_GRAPHS stop

  # Sometimes it could be that default way to stop graphs fails, so we will kill it in other way
  for PID in $(pgrep -u $(id -u) -f "$GRAPHS_PATTERN" | sort -rn); do
    PSLINE=$(ps -o pid=,bsdstart=,args= $PID |
             perl -n -e 'print join(" ", (split)[0..6])')
    echo "Stopping $PID ($PSLINE):"
    kill -9 $PID
  done
}

# Function which is used to stop the service
function stop {
  echo "Stopping the $SERVICE_TITLE"
  apache2/etc/init.d/httpd stop
  kill_graphs
}

# function to restart the graphs service independently
function restart_graphs {
  cd $STATEDIR
  [ -f $PHEDEX_GRAPHS ] || return
  kill_graphs
  $PHEDEX_GRAPHS start </dev/null 2>&1
}

# Function to chack the status of the process
function status {
  echo "Checking the $SERVICE_TITLE status..."
  apache2/etc/init.d/httpd status
  [ -f $PHEDEX_GRAPHS ] && $PHEDEX_GRAPHS status
}

# Function to do graceful restart
function graceful {
  echo "Restarting gracefully the $SERVICE_TITLE"
  $STATEDIR/apache2/etc/init.d/httpd graceful
}

#######################################################
# Function to provide the help for the user
# To edit the help provided, edit lines with the ##H prefix
#######################################################
##H Available actions:
##H   status - show current service's status
##H   start - start the service
##H   stop - stop the service
##H   restart - restart the service
##H   graceful - restart the service gracefully
##H   rgraphs - restart only the graphs service
##H   version - get current version of the service
##H Security string - string needed to perform actions, see twiki page
#######################################################
function help {
  echo "$SERVICE_TITLE management script"
  echo "Usage: $0 status|start|stop|restart|rgraphs|help|version security_string"
  echo "For more details, check the Twiki page: $TWIKI_PAGE"
  perl -ne '/^##H / && do { s/^##H ?//; print }' < $0
}

# Function to check the security string.
function check {
  CHECK=$(echo "$1" | md5sum | awk '{print $1}')
  if [ $CHECK != 94e261a5a70785552d34a65068819993 ]; then
    echo "$0: cannot complete operation, please check documentation."
    exit 2;
  fi
}

#######################################################
# The engine of the script. The place where the
# script reacts to the actions.
# Params: $1 - action
#         $2 - security string
#######################################################

case $1 in
  sysboot)
    if ps -oargs= $PPID | grep -q -e crond; then
      sysboot
    else
      echo "$0: sysboot is for cron only" 1>&2
      exit 1
    fi ;;
  start | restart)
    check "$2"
    stop
    start
    status
    ;;
  status)
    status
    ;;
  stop)
    check "$2"
    stop
    status
    ;;
  graceful)
    check "$2"
    graceful
    status
    ;;
  rgraphs)
    check "$2"
    restart_graphs
    status
    ;;
  help)
    help
    ;;
  version)
    echo "Management script for $SERVICE_TITLE."
    ;;
  * )
    echo "$0: unknown action '$1', please try '$0 help' or documentation." 1>&2
    exit 1 ;;
esac
