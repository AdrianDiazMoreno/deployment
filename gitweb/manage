#!/bin/sh

##H Usage: manage ACTION [SECURITY-STRING]
##H
##H Available actions:
##H   help        show this help
##H   version     get current version of the service
##H   status      show current service's status
##H   sysboot     start server from crond if not running
##H   restart     (re)start the service
##H   start       (re)start the service
##H   graceful    restart the service gracefully
##H   stop        stop the service
##H   get         fetch git repository ARG from CERN/GIT service

[ $(id -un) != cmsweb -o "$1" = "get" ] ||
  { echo "ERROR: please use another account" 1>&2; exit 1; }

echo_e=-e bsdstart=bsdstart
case $(uname) in Darwin )
  md5sum() { md5 -r ${1+"$@"}; }
  echo_e= bsdstart=start
  ;;
esac

ME=$(basename $(dirname $0))
TOP=$(cd $(dirname $0)/../../.. && pwd)
ROOT=$(cd $(dirname $0)/../.. && pwd)
CFGDIR=$(dirname $0)
LOGDIR=$TOP/logs/$ME
STATEDIR=$TOP/state/$ME
PROCESS_PATTERN="/httpd -f $STATEDIR/server.conf"
COLOR_OK="\\033[0;32m"
COLOR_WARN="\\033[0;31m"
COLOR_NORMAL="\\033[0;39m"

PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/kerberos/bin
. $ROOT/apps/gitweb/etc/profile.d/init.sh
export GITWEB_CONFIG=$CFGDIR/gitweb_config.perl

# Start service conditionally on crond restart.
sysboot()
{
  if [ $(pgrep -u $(id -u) -f "$PROCESS_PATTERN" | wc -l) = 0 ]; then
    start
  fi
}

# Start the service.
start()
{
  cd $STATEDIR
  echo "starting $ME"
  $STATEDIR/etc/httpd restart </dev/null 2>&1
}

# Stop the service.
stop()
{
  echo "stopping $ME"
  for PID in $(pgrep -u $(id -u) -f "$PROCESS_PATTERN" | sort -n); do
    PSLINE=$(ps -o pid=,$bsdstart=,args= $PID |
             perl -n -e 'print join(" ", (split)[0..6])')
    [ $(ps h $PID | wc -l) = 0 ] && break
    echo "Stopping $PID ($PSLINE):"
    kill -INT $PID
    sleep 1
    kill -9 $PID 2>/dev/null
  done
}

# Check if the server is running.
status()
{
  pid=$(pgrep -u $(id -u) -f "$PROCESS_PATTERN" | sort -n)
  if [ X"$pid" = X ]; then
    echo $echo_e "$ME is ${COLOR_WARN}NOT RUNNING${COLOR_NORMAL}."
  else
    echo $echo_e "$ME is ${COLOR_OK}RUNNING${COLOR_NORMAL}, PID" $pid
  fi
}

graceful()
{
  echo "restarting $ME gracefully"
  $STATEDIR/etc/httpd graceful
}

get()
{
  local repo=$1
  klist -s ||
    { echo "You must have a valid kerberos token to fetch git repositories from CERN/GIT." 1>&2; exit 20; }
  cd $STATEDIR/reps
  if [ -d "$repo" ]; then
    (cd $repo; git pull -q)
  else
    git clone https://:@git.cern.ch/kerberos/$repo
  fi
}

# Verify the security string.
check()
{
  CHECK=$(echo "$1" | md5sum | awk '{print $1}')
  if [ $CHECK != 94e261a5a70785552d34a65068819993 ]; then
    echo "$0: cannot complete operation, please check documentation." 1>&2
    exit 2;
  fi
}

# Main routine, perform action requested on command line.
case ${1:-status} in
  sysboot )
    sysboot
    ;;

  start | restart )
    check "$2"
    stop
    start
    ;;

  status )
    status
    ;;

  stop )
    check "$2"
    stop
    ;;

  graceful )
    check "$2"
    graceful
    ;;

  get )
    check "$3"
    get "$2"
    ;;

  help )
    perl -ne '/^##H/ && do { s/^##H ?//; print }' < $0
    ;;

  version )
    echo "$GITWEB_VERSION"
    ;;

  * )
    echo "$0: unknown action '$1', please try '$0 help' or documentation." 1>&2
    exit 1
    ;;
esac
