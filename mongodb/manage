#!/bin/sh

case $(id -un) in cmsweb ) echo "ERROR: please use another account" 1>&2; exit 1;; esac

#######################################################
# MongoDB management script
#######################################################
# Setting the basic and common variables.
# Make sure that these are up to date.
# If need a new variable, it must be defined here.
# Use export if you really need this!
#######################################################

SERVICE_TITLE="MongoDB"
TWIKI_PAGE="https://twiki.cern.ch/twiki/bin/view/CMS/DASOperation"
DBDIR=/data/das/db

cd $(dirname $(dirname $0))
. app/etc/profile.d/init.sh

#######################################################
#  Function for the main actions.
#  If using the variable here, need to define it in the
#  top part of the script, to keep them in one place.
#######################################################

# Function to clean-up and update specific DB in Mongo
# it accepts a single parameter in a form <dbname>_<collection_name>,
# e.g. mapping_db
# First it uses a cleanup script, e.g. clean_mapping_db.js to clean DB content
# then use update script to populate new content into DB, e.g. update_mapping_db.js
# The update script contains a JSON docs to be populated.
function update_db {
  stamp=`cat stagingarea/update_$1.js | md5sum`
  if  [ -f stagingarea/$1-schema-stamp ]; then
oldstamp=`cat stagingarea/$1-schema-stamp`
  else
        oldstamp="X"
  fi
  # Check schema stamp
  if [ ! -f stagingarea/$1-schema-stamp ] || [ "$oldstamp" != "$stamp" ]; then
     # exit if anything dies
     set -e

     echo "Clean $1"
     mongo --port 8230 stagingarea/clean_$1.js
     echo "Update $1"
     db=`echo $1 | awk '{split($1,a,"_"); print a[1]}'`
     coll=`echo $1 | awk '{split($1,a,"_"); print a[2]}'`
     mongoimport --port 8230 --db $db --collection $coll --file stagingarea/update_$1.js

     cat stagingarea/update_$1.js | md5sum > stagingarea/$1-schema-stamp

     # done with unsafe stuff
     set +e
  fi

}

# Function to start the service conditionally on crond restart
function sysboot {
  PID=$(cat $DBDIR/mongod.lock 2>/dev/null)
  if [ X"$PID" = X ] || [ $(ps h $PID | wc -l) = 0 ]; then
    # must clean-up improper shutdown
    rm -rf $DBDIR/*
    rm -f $PWD/stagingarea/*-schema-stamp
    start
    sleep 2
    update_db "mapping_db"
  fi
}

# Function to start the service
function start()
{
  echo "Starting the $SERVICE_TITLE"
  $MONGO_ROOT/bin/mongod --dbpath=$DBDIR \
      --port 8230 --nohttpinterface --bind_ip 127.0.0.1 \
      </dev/null 2>&1 | rotatelogs logs/mongodb-%Y%m%d.log 86400 >/dev/null 2>&1 &
  sleep 2
  echo
  echo "$SERVICE_TITLE is ready"
}

# Function to stop the service
function stop()
{
  echo "Stopping the $SERVICE_TITLE"
  PID=$(cat $DBDIR/mongod.lock 2>/dev/null)
  if [ X"$PID" != X ]; then
    kill -INT $PID
    n=0
    while [ -s $DBDIR/mongod.lock -a $n -le 10 ]; do
      echo "Waiting for mongod to exit..."
      n=$(expr $n + 1)
      sleep 1
    done
  fi
}

# Function to check the status of the process
function status()
{
  PID=$(cat $DBDIR/mongod.lock 2>/dev/null)
  if [ X"$PID" != X ] && [ $(ps -p $PID | wc -l) != 0 ]; then
    echo "$SERVICE_TITLE is RUNNING, PID $PID."
  else
    echo "$SERVICE_TITLE is NOT RUNNING."
  fi
}

#######################################################
# Function to provide the help for the user
# To edit the help provided, edit lines with the ##H prefix
#######################################################
##H Available actions:
##H   sysboot - start server from crond if not running
##H   status - show current service's status
##H   start - start the service
##H   stop - stop the service
##H   restart - restart the service
##H   version - get current version of the service
##H Security string - string needed to perform actions, see twiki page
#######################################################
function help {
  echo "$SERVICE_TITLE management script"
  echo "Usage: $0 status|start|stop|restart|help|version security_string"
  echo "For more details, check the Twiki page: $TWIKI_PAGE"
  perl -ne '/^##H / && do { s/^##H ?//; print }' < $0
}

# Function to check the security string.
function check {
  CHECK=$(echo "$1" | md5sum | awk '{print $1}')
  if [ $CHECK != 94e261a5a70785552d34a65068819993 ]; then
    echo "$0: cannot complete operation, please check documentation."
    exit 2;
  fi
}

#######################################################
# The engine of the script. The place where the
# script reacts to the actions.
# Params: $1 - action
#         $2 - security string
#######################################################

case $1 in
  sysboot)
    if ps -oargs= $PPID | grep -q -e crond; then
      sysboot
    else
      echo "$0: sysboot is for cron only" 1>&2
      exit 1
    fi
    ;;
  start | restart)
    check "$2"
    stop
    start
    sleep 2
    update_db "mapping_db"
    status
    ;;
  status)
    status
    ;;
  stop)
    check "$2"
    stop
    status
    ;;
  help)
    help
    ;;
  version)
    echo "Management script for $SERVICE_TITLE."
    ;;
  *)
    echo "$0: unknown action '$1', please try '$0 help' or documentation." 1>&2
    exit 1 ;;
esac
